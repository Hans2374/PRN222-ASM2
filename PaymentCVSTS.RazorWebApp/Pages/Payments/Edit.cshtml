@page
@model PaymentCVSTS.RazorWebApp.Pages.Payments.EditModel

@{
    ViewData["Title"] = "Edit Payment";

    // Store values in variables for clarity and format amount specifically
    var paymentId = Model.Payment.PaymentId;

    // Format amount with invariant culture to ensure proper decimal formatting
    var amount = Model.Payment.Amount.ToString("0", System.Globalization.CultureInfo.InvariantCulture);

    var status = Model.Payment.PaymentStatus;
    var method = Model.Payment.PaymentMethod;
    var date = Model.Payment.PaymentDate.ToString("yyyy-MM-dd");
    var appointmentId = Model.Payment.AppointmentId;
}

<h1>Edit Payment</h1>

<h4>Payment ID: @paymentId</h4>
<hr />

<div class="row">
    <div class="col-md-4">
        <form id="editForm" method="post" novalidate>
            <input type="hidden" id="paymentId" value="@paymentId" />

            <div class="form-group mb-3">
                <label for="amount">Amount</label>
                <input type="number" id="amount" name="amount" class="form-control" value="@amount" step="0.01" />
                <span class="text-danger" id="amount-error"></span>
            </div>

            <div class="form-group mb-3">
                <label for="status">Payment Status</label>
                <select id="status" name="status" class="form-control">
                    <option value="">-- Select Status --</option>
                    @if (status == "Pending")
                    {
                        <option value="Pending" selected>Pending</option>
                    }
                    else
                    {
                        <option value="Pending">Pending</option>
                    }

                    @if (status == "Completed")
                    {
                        <option value="Completed" selected>Completed</option>
                    }
                    else
                    {
                        <option value="Completed">Completed</option>
                    }

                    @if (status == "Failed")
                    {
                        <option value="Failed" selected>Failed</option>
                    }
                    else
                    {
                        <option value="Failed">Failed</option>
                    }
                </select>
                <span class="text-danger" id="status-error"></span>
            </div>

            <div class="form-group mb-3">
                <label for="method">Payment Method</label>
                <select id="method" name="method" class="form-control">
                    <option value="">-- Select Method --</option>
                    @if (method == "Credit Card")
                    {
                        <option value="Credit Card" selected>Credit Card</option>
                    }
                    else
                    {
                        <option value="Credit Card">Credit Card</option>
                    }

                    @if (method == "Debit Card")
                    {
                        <option value="Debit Card" selected>Debit Card</option>
                    }
                    else
                    {
                        <option value="Debit Card">Debit Card</option>
                    }

                    @if (method == "Bank Transfer")
                    {
                        <option value="Bank Transfer" selected>Bank Transfer</option>
                    }
                    else
                    {
                        <option value="Bank Transfer">Bank Transfer</option>
                    }

                    @if (method == "Cash")
                    {
                        <option value="Cash" selected>Cash</option>
                    }
                    else
                    {
                        <option value="Cash">Cash</option>
                    }

                    @if (method == "PayPal")
                    {
                        <option value="PayPal" selected>PayPal</option>
                    }
                    else
                    {
                        <option value="PayPal">PayPal</option>
                    }
                </select>
                <span class="text-danger" id="method-error"></span>
            </div>

            <div class="form-group mb-3">
                <label for="date">Payment Date</label>
                <input type="date" id="date" name="date" class="form-control" value="@date" />
                <span class="text-danger" id="date-error"></span>
            </div>

            <div class="form-group mb-3">
                <label for="appointmentId">Service Type</label>
                <select id="appointmentId" name="appointmentId" class="form-control">
                    <option value="">-- Select Service Type --</option>
                    @foreach (var item in ViewBag.AppointmentId)
                    {
                        if (item.Value == appointmentId.ToString())
                        {
                            <option value="@item.Value" selected>@item.Text</option>
                        }
                        else
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    }
                </select>
                <span class="text-danger" id="appointmentId-error"></span>
            </div>

            <div class="form-group mt-4">
                <button type="button" id="saveButton" class="btn btn-primary">Save Changes</button>
                <a href="./Index" class="btn btn-secondary">Cancel</a>
            </div>
        </form>

        <div id="errorMessage" class="alert alert-danger mt-3" style="display: none;"></div>
    </div>
</div>

@section Scripts {
    <script src="~/js/signalr/dist/browser/signalr.min.js"></script>

    <script>
        // This script explicitly ensures all form fields have proper initial values
        document.addEventListener('DOMContentLoaded', function() {
            // Original amount value from model
            const originalAmount = @Model.Payment.Amount;
            console.log("Original amount from model:", originalAmount);

            // Format amount string for display
            const formattedAmount = "@amount";
            console.log("Formatted amount string:", formattedAmount);

            // Set amount directly with original numeric value
            document.getElementById('amount').value = originalAmount;
            console.log("Amount field value after setting:", document.getElementById('amount').value);

            // Display current values to console for debugging all fields
            console.log("Current payment values:", {
                paymentId: @paymentId,
                amount: document.getElementById('amount').value,
                status: document.getElementById('status').value,
                method: document.getElementById('method').value,
                date: document.getElementById('date').value,
                appointmentId: document.getElementById('appointmentId').value
            });

            // Create SignalR connection
            const connection = new signalR.HubConnectionBuilder()
                .withUrl('/paymentHub')
                .build();

            // Start connection
            connection.start()
                .then(() => console.log('Connected to SignalR hub'))
                .catch(err => console.error('Error connecting to SignalR:', err));

            // Handle save button click
            document.getElementById('saveButton').addEventListener('click', async function() {
                // Clear previous error messages
                document.getElementById('amount-error').textContent = '';
                document.getElementById('status-error').textContent = '';
                document.getElementById('method-error').textContent = '';
                document.getElementById('date-error').textContent = '';
                document.getElementById('appointmentId-error').textContent = '';
                document.getElementById('errorMessage').style.display = 'none';

                // Validate form
                if (!validateForm()) {
                    return;
                }

                // Show loading state
                this.disabled = true;
                this.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Saving...';

                try {
                    // Get form values and ensure number values are parsed correctly
                    const payment = {
                        paymentId: parseInt(document.getElementById('paymentId').value),
                        amount: parseFloat(document.getElementById('amount').value),
                        paymentStatus: document.getElementById('status').value,
                        paymentMethod: document.getElementById('method').value,
                        paymentDate: document.getElementById('date').value,
                        appointmentId: parseInt(document.getElementById('appointmentId').value)
                    };

                    console.log('Sending payment update:', payment);

                    // Send update via SignalR
                    await connection.invoke('UpdatePayment', JSON.stringify(payment));

                    // Redirect on success
                    window.location.href = './Index';
                } catch (error) {
                    console.error('Error updating payment:', error);

                    // Show error message
                    const errorDiv = document.getElementById('errorMessage');
                    errorDiv.textContent = 'Error updating payment: ' + error.message;
                    errorDiv.style.display = 'block';

                    // Reset button
                    this.disabled = false;
                    this.textContent = 'Save Changes';
                }
            });

            // Form validation
            function validateForm() {
                let isValid = true;

                // Amount validation
                const amount = document.getElementById('amount').value;
                if (!amount || isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {
                    document.getElementById('amount-error').textContent = 'Please enter a valid amount greater than 0';
                    isValid = false;
                }

                // Status validation
                if (!document.getElementById('status').value) {
                    document.getElementById('status-error').textContent = 'Please select a payment status';
                    isValid = false;
                }

                // Method validation
                if (!document.getElementById('method').value) {
                    document.getElementById('method-error').textContent = 'Please select a payment method';
                    isValid = false;
                }

                // Date validation
                if (!document.getElementById('date').value) {
                    document.getElementById('date-error').textContent = 'Please select a payment date';
                    isValid = false;
                }

                // Appointment validation
                if (!document.getElementById('appointmentId').value) {
                    document.getElementById('appointmentId-error').textContent = 'Please select a service type';
                    isValid = false;
                }

                return isValid;
            }
        });
    </script>
}