@page
@model PaymentCVSTS.RazorWebApp.Pages.Payments.IndexModel

@{
    ViewData["Title"] = "Payments";
}

<h1>Payments</h1>

<div class="row">
    <div class="col-md-12">
        <form method="get" class="d-flex flex-wrap align-items-end mb-3">
            <div class="col-md-3 pe-2 mb-3">
                <div class="form-group">
                    <label class="control-label">Payment Method</label>
                    <select name="PaymentMethod" class="form-control" asp-items="@ViewData["PaymentMethods"] as SelectList">
                        <option value="">-- Select Method --</option>
                    </select>
                </div>
            </div>
            <div class="col-md-3 pe-2 mb-3">
                <div class="form-group">
                    <label class="control-label">Payment Status</label>
                    <select name="PaymentStatus" class="form-control" asp-items="@ViewData["PaymentStatus"] as SelectList">
                        <option value="">-- Select Status --</option>
                    </select>
                </div>
            </div>
            <div class="col-md-3 pe-2 mb-3">
                <div class="form-group">
                    <label class="control-label">Payment Date</label>
                    <input type="date" name="PaymentDate" class="form-control" value="@(Model.PaymentDate?.ToString("yyyy-MM-dd"))" />
                </div>
            </div>
            <div class="col-md-3 mb-3">
                <input type="submit" class="btn btn-success me-2" value="Search" />
                <a asp-page="Create" class="btn btn-primary">Create New Payment</a>
            </div>
        </form>
    </div>
</div>

<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>
                <a asp-page="./Index"
                   asp-route-sortField="Amount"
                   asp-route-sortDirection="@(Model.SortField == "Amount" && Model.SortDirection == "asc" ? "desc" : "asc")"
                   asp-route-PaymentDate="@Model.PaymentDate?.ToString("yyyy-MM-dd")"
                   asp-route-PaymentStatus="@Model.PaymentStatus"
                   asp-route-PaymentMethod="@Model.PaymentMethod"
                   asp-route-currentPage="@Model.CurrentPage">
                    Amount
                    @if (Model.SortField == "Amount")
                    {
                        <i class="bi @(Model.SortDirection == "asc" ? "bi-sort-down" : "bi-sort-up")"></i>
                    }
                    else
                    {
                        <i class="bi bi-sort"></i>
                    }
                </a>
            </th>
            <th>Status</th>
            <th>Method</th>
            <th>
                <a asp-page="./Index"
                   asp-route-sortField="PaymentDate"
                   asp-route-sortDirection="@(Model.SortField == "PaymentDate" && Model.SortDirection == "asc" ? "desc" : "asc")"
                   asp-route-PaymentDate="@Model.PaymentDate?.ToString("yyyy-MM-dd")"
                   asp-route-PaymentStatus="@Model.PaymentStatus"
                   asp-route-PaymentMethod="@Model.PaymentMethod"
                   asp-route-currentPage="@Model.CurrentPage">
                    Date
                    @if (Model.SortField == "PaymentDate")
                    {
                        <i class="bi @(Model.SortDirection == "asc" ? "bi-sort-down" : "bi-sort-up")"></i>
                    }
                    else
                    {
                        <i class="bi bi-sort"></i>
                    }
                </a>
            </th>
            <th>Service Type</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="payment-table-body">
        @foreach (var item in Model.Payments)
        {
            <tr id="payment-@item.PaymentId">
                <td>
                    $@item.Amount.ToString("N2")
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PaymentStatus)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PaymentMethod)
                </td>
                <td>
                    @item.PaymentDate.ToString("dd/MM/yyyy")
                </td>
                <td>
                    @(item.Appointment?.ServiceType ?? "N/A")
                </td>
                <td>
                    <a asp-page="./Details" asp-route-id="@item.PaymentId">Details</a> |
                    <a asp-page="./Edit" asp-route-id="@item.PaymentId">Edit</a> |
                    <a asp-page="./Delete" asp-route-id="@item.PaymentId" class="text-danger">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Pagination Controls -->
<div class="d-flex justify-content-between align-items-center mt-4">
    <div>
        <span>Showing page @Model.CurrentPage of @Model.TotalPages (@Model.TotalItems total records)</span>
    </div>

    @if (Model.TotalPages > 1)
    {
        <nav aria-label="Page navigation">
            <ul class="pagination">
                <!-- First Page -->
                <li class="page-item @(!Model.HasPreviousPage ? "disabled" : "")">
                    <a class="page-link"
                       asp-page="./Index"
                       asp-route-currentPage="1"
                       asp-route-PaymentDate="@Model.PaymentDate?.ToString("yyyy-MM-dd")"
                       asp-route-PaymentStatus="@Model.PaymentStatus"
                       asp-route-PaymentMethod="@Model.PaymentMethod"
                       asp-route-sortField="@Model.SortField"
                       asp-route-sortDirection="@Model.SortDirection">First</a>
                </li>

                <!-- Previous Page -->
                <li class="page-item @(!Model.HasPreviousPage ? "disabled" : "")">
                    <a class="page-link"
                       asp-page="./Index"
                       asp-route-currentPage="@(Model.CurrentPage - 1)"
                       asp-route-PaymentDate="@Model.PaymentDate?.ToString("yyyy-MM-dd")"
                       asp-route-PaymentStatus="@Model.PaymentStatus"
                       asp-route-PaymentMethod="@Model.PaymentMethod"
                       asp-route-sortField="@Model.SortField"
                       asp-route-sortDirection="@Model.SortDirection">Previous</a>
                </li>

                <!-- Page Numbers -->
                @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link"
                           asp-page="./Index"
                           asp-route-currentPage="@i"
                           asp-route-PaymentDate="@Model.PaymentDate?.ToString("yyyy-MM-dd")"
                           asp-route-PaymentStatus="@Model.PaymentStatus"
                           asp-route-PaymentMethod="@Model.PaymentMethod"
                           asp-route-sortField="@Model.SortField"
                           asp-route-sortDirection="@Model.SortDirection">@i</a>
                    </li>
                }

                <!-- Next Page -->
                <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
                    <a class="page-link"
                       asp-page="./Index"
                       asp-route-currentPage="@(Model.CurrentPage + 1)"
                       asp-route-PaymentDate="@Model.PaymentDate?.ToString("yyyy-MM-dd")"
                       asp-route-PaymentStatus="@Model.PaymentStatus"
                       asp-route-PaymentMethod="@Model.PaymentMethod"
                       asp-route-sortField="@Model.SortField"
                       asp-route-sortDirection="@Model.SortDirection">Next</a>
                </li>

                <!-- Last Page -->
                <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
                    <a class="page-link"
                       asp-page="./Index"
                       asp-route-currentPage="@Model.TotalPages"
                       asp-route-PaymentDate="@Model.PaymentDate?.ToString("yyyy-MM-dd")"
                       asp-route-PaymentStatus="@Model.PaymentStatus"
                       asp-route-PaymentMethod="@Model.PaymentMethod"
                       asp-route-sortField="@Model.SortField"
                       asp-route-sortDirection="@Model.SortDirection">Last</a>
                </li>
            </ul>
        </nav>
    }
</div>

@section Scripts {
    <script src="~/js/signalr/dist/browser/signalr.min.js"></script>
    <script>
        // Initialize when document is ready
        document.addEventListener('DOMContentLoaded', function() {
            // Create SignalR connection
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/paymentHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            // Format functions
            function formatCurrency(amount) {
                return "$" + parseFloat(amount).toFixed(2);
            }

            function formatDate(dateString) {
                if (!dateString) return "";

                // If it's already in dd/MM/yyyy format, return as is
                if (typeof dateString === 'string' && dateString.match(/^\d{2}\/\d{2}\/\d{4}$/)) {
                    return dateString;
                }

                const date = new Date(dateString);
                if (isNaN(date.getTime())) return dateString;

                return `${String(date.getDate()).padStart(2, '0')}/${String(date.getMonth() + 1).padStart(2, '0')}/${date.getFullYear()}`;
            }

            // Generate row HTML
            function generateRowHtml(payment) {
                return `
                    <tr id="payment-${payment.paymentId}">
                        <td>${formatCurrency(payment.amount)}</td>
                        <td>${payment.paymentStatus}</td>
                        <td>${payment.paymentMethod}</td>
                        <td>${formatDate(payment.paymentDate)}</td>
                        <td>${payment.appointment ? payment.appointment.serviceType : "N/A"}</td>
                        <td>
                            <a href="./Details?id=${payment.paymentId}">Details</a> |
                            <a href="./Edit?id=${payment.paymentId}">Edit</a> |
                            <a href="./Delete?id=${payment.paymentId}" class="text-danger">Delete</a>
                        </td>
                    </tr>
                `;
            }

            // Event handler for new payments
            connection.on("Receive_Payment", function(payment) {
                console.log("New payment received:", payment);

                // Only add if we're on page 1
                if (@Model.CurrentPage === 1) {
                    // Create row HTML
                    const newRow = generateRowHtml(payment);

                    // Insert at top of table
                    const tableBody = document.getElementById('payment-table-body');
                    if (tableBody) {
                        tableBody.insertAdjacentHTML('afterbegin', newRow);

                        // Remove last row if we have more than page size
                        const rows = tableBody.querySelectorAll('tr');
                        if (rows.length > @Model.PageSize) {
                            tableBody.removeChild(rows[rows.length - 1]);
                        }
                    }
                }
            });

            // Event handler for updated payments
            connection.on("Receive_UpdatePayment", function(payment) {
                console.log("Updated payment received:", payment);

                // Find the row by payment ID
                const row = document.getElementById(`payment-${payment.paymentId}`);
                if (row) {
                    // Replace the row with updated content
                    const updatedRow = generateRowHtml(payment);
                    row.outerHTML = updatedRow;
                    console.log(`Row payment-${payment.paymentId} updated`);
                } else {
                    console.warn(`Row payment-${payment.paymentId} not found for update`);
                }
            });

            // Event handler for deleted payments
            connection.on("Receive_DeletePayment", function(paymentId) {
                console.log("Delete notification received for payment ID:", paymentId);

                // Find the row by payment ID
                const row = document.getElementById(`payment-${paymentId}`);
                if (row) {
                    // Remove the row with animation
                    row.style.transition = "opacity 0.5s";
                    row.style.opacity = "0";
                    setTimeout(() => {
                        row.remove();
                        console.log(`Row payment-${paymentId} removed`);
                    }, 500);
                } else {
                    console.warn(`Row payment-${paymentId} not found for deletion`);
                }
            });

            // Start connection
            connection.start()
                .then(() => console.log("Connected to SignalR hub"))
                .catch(err => console.error("SignalR Connection Error:", err));
        });
    </script>
}