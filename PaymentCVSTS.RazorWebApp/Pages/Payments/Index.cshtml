@page
@model PaymentCVSTS.RazorWebApp.Pages.Payments.IndexModel

@{
    ViewData["Title"] = "Payments";
}

<h1>Payments</h1>

<div class="row">
    <div class="col-md-12">
        <form asp-page="./Index" method="get" class="d-flex align-items-center mb-3">
            <div class="col-md-3">
                <div class="form-group me-3">
                    <label class="control-label">Child ID</label>
                    <input type="number" name="ChildId" class="form-control" value="@Model.ChildId" />
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group me-3">
                    <label class="control-label">Payment Status</label>
                    <select name="PaymentStatus" class="form-control" asp-items="@ViewData["PaymentStatus"] as SelectList">
                        <option value="">-- Select Status --</option>
                    </select>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group me-3">
                    <label class="control-label">Payment Date</label>
                    <input type="date" name="PaymentDate" class="form-control" value="@Model.PaymentDate" />
                </div>
            </div>
            <div class="col-md-3 mt-4 me-3">
                <input type="submit" class="btn btn-success" value="Search" />
                <a asp-page="Create" class="btn btn-primary">Create New Payment</a>
            </div>

            <!-- Preserve sort order in search form -->
            <input type="hidden" name="sortOrder" value="@Model.SortOrder" />
        </form>
    </div>
</div>
<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.AmountSort" asp-route-currentPage="@Model.CurrentPage">
                    Amount
                    @if (Model.CurrentSort == "amount_asc")
                    {
                        <i class="bi bi-arrow-up"></i>
                    }
                    else if (Model.CurrentSort == "amount_desc")
                    {
                        <i class="bi bi-arrow-down"></i>
                    }
                </a>
            </th>
            <th>
                Status
            </th>
            <th>
                Method
            </th>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.DateSort" asp-route-currentPage="@Model.CurrentPage">
                    Date
                    @if (Model.CurrentSort == "date_asc")
                    {
                        <i class="bi bi-arrow-up"></i>
                    }
                    else if (Model.CurrentSort == "date_desc")
                    {
                        <i class="bi bi-arrow-down"></i>
                    }
                </a>
            </th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="idPayment">
        @foreach (var item in Model.PaginatedPayments)
        {
            <tr id="@item.PaymentId">
                <td>
                    $@((int)item.Amount)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PaymentStatus)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PaymentMethod)
                </td>
                <td>
                    @(item.PaymentDate.ToString("yyyy-MM-dd"))
                </td>
                <td>
                    <a asp-page="./Details" asp-route-id="@item.PaymentId">Details</a> |
                    <a asp-page="./Edit" asp-route-id="@item.PaymentId">Edit</a> |
                    <button class="btn btn-danger btn-sm delete-payment" data-id="@item.PaymentId"
                            data-bs-toggle="modal" data-bs-target="#deleteModal">
                        Delete
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Pagination -->
<nav aria-label="Payments pagination">
    <ul class="pagination">
        @if (Model.HasPreviousPage)
        {
            <li class="page-item">
                <a class="page-link" asp-page="./Index" asp-route-currentPage="1" asp-route-sortOrder="@Model.SortOrder">First</a>
            </li>
            <li class="page-item">
                <a class="page-link" asp-page="./Index" asp-route-currentPage="@(Model.CurrentPage - 1)" asp-route-sortOrder="@Model.SortOrder">Previous</a>
            </li>
        }
        else
        {
            <li class="page-item disabled">
                <span class="page-link">First</span>
            </li>
            <li class="page-item disabled">
                <span class="page-link">Previous</span>
            </li>
        }

        @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
        {
            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                <a class="page-link" asp-page="./Index" asp-route-currentPage="@i" asp-route-sortOrder="@Model.SortOrder">@i</a>
            </li>
        }

        @if (Model.HasNextPage)
        {
            <li class="page-item">
                <a class="page-link" asp-page="./Index" asp-route-currentPage="@(Model.CurrentPage + 1)" asp-route-sortOrder="@Model.SortOrder">Next</a>
            </li>
            <li class="page-item">
                <a class="page-link" asp-page="./Index" asp-route-currentPage="@Model.TotalPages" asp-route-sortOrder="@Model.SortOrder">Last</a>
            </li>
        }
        else
        {
            <li class="page-item disabled">
                <span class="page-link">Next</span>
            </li>
            <li class="page-item disabled">
                <span class="page-link">Last</span>
            </li>
        }
    </ul>
</nav>

<div class="mb-3">
    Showing @((Model.CurrentPage - 1) * Model.PageSize + (Model.PaginatedPayments.Count > 0 ? 1 : 0))
    to @(Math.Min(Model.CurrentPage * Model.PageSize, Model.Payments.Count))
    of @Model.Payments.Count payments
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this payment?</p>
                <p class="fw-bold">This action cannot be undone.</p>

                <div class="d-flex justify-content-between mt-3">
                    <div>
                        <div class="mb-1"><strong>Payment ID:</strong> <span id="deletePaymentId"></span></div>
                        <div><strong>Amount:</strong> $<span id="deletePaymentAmount"></span></div>
                    </div>
                    <div>
                        <div class="mb-1"><strong>Status:</strong> <span id="deletePaymentStatus"></span></div>
                        <div><strong>Date:</strong> <span id="deletePaymentDate"></span></div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script>
        $(document).ready(function () {
            console.log("Initializing SignalR connection");
            var connection = new signalR.HubConnectionBuilder().withUrl("/paymentHub").build();
            var deletePaymentId = 0;

            // Set up delete modal data
            $(document).on("click", ".delete-payment", function() {
                deletePaymentId = $(this).data("id");
                var row = $("#" + deletePaymentId);

                // Extract payment data from the row
                var amount = row.find("td:eq(0)").text().trim().substring(1); // Remove $ sign
                var status = row.find("td:eq(1)").text().trim();
                var date = row.find("td:eq(3)").text().trim();

                // Update modal with payment details
                $("#deletePaymentId").text(deletePaymentId);
                $("#deletePaymentAmount").text(amount);
                $("#deletePaymentStatus").text(status);
                $("#deletePaymentDate").text(date);
            });

            // Handle the delete confirmation
            $("#confirmDelete").click(function() {
                if (deletePaymentId > 0) {
                    // Show loading state
                    $(this).prop("disabled", true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Deleting...');

                    // Send delete request via SignalR
                    connection.invoke("DeletePayment", deletePaymentId)
                        .then(function() {
                            // Hide modal on success
                            $("#deleteModal").modal("hide");

                            // Show success message with toast
                            showToast("Payment deleted successfully");

                            // Remove row from the table
                            $("#" + deletePaymentId).fadeOut(500, function() {
                                $(this).remove();

                                // Refresh the page to update pagination after a short delay
                                setTimeout(function() {
                                    location.reload();
                                }, 1000);
                            });
                        })
                        .catch(function(err) {
                            console.error(err);
                            // Show error message with toast
                            showToast("Error deleting payment", "error");

                            // Reset button state
                            $("#confirmDelete").prop("disabled", false).text("Delete");
                        });
                }
            });

            // Create toast container if it doesn't exist
            if ($("#toastContainer").length === 0) {
                $("body").append(`
                    <div id="toastContainer" class="position-fixed bottom-0 end-0 p-3" style="z-index: 9999">
                    </div>
                `);
            }

            // Function to show toast messages
            function showToast(message, type = "success") {
                const bgClass = type === "success" ? "bg-success" : "bg-danger";
                const toastId = "toast_" + Date.now();

                const toast = `
                    <div id="${toastId}" class="toast align-items-center text-white ${bgClass} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="d-flex">
                            <div class="toast-body">
                                ${message}
                            </div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                    </div>
                `;

                $("#toastContainer").append(toast);

                const toastElement = new bootstrap.Toast(document.getElementById(toastId), {
                    delay: 3000
                });
                toastElement.show();

                // Remove toast element after it's hidden
                $(`#${toastId}`).on('hidden.bs.toast', function () {
                    $(this).remove();
                });
            }

            // Receive payment from hub
            connection.on("Receive_Payment", function (payment) {
                console.log("📩 Received payment data:", payment);

                // Only add to DOM if we're on the first page
                if (@Model.CurrentPage === 1) {
                    var trPayment = `
                        <tr id="${payment.paymentId}">
                            <td>$${Math.floor(payment.amount)}</td>
                            <td>${payment.paymentStatus}</td>
                            <td>${payment.paymentMethod}</td>
                            <td>${payment.paymentDate ? payment.paymentDate.split('T')[0] : ""}</td>
                            <td>
                                <a href="./Details?id=${payment.paymentId}">Details</a> |
                                <a href="./Edit?id=${payment.paymentId}">Edit</a> |
                                <button class="btn btn-danger btn-sm delete-payment" data-id="${payment.paymentId}" data-bs-toggle="modal" data-bs-target="#deleteModal">Delete</button>
                            </td>
                        </tr>`;
                    $("#idPayment").prepend(trPayment);

                    // Remove the last row if we now have more than the page size
                    if ($("#idPayment tr").length > @Model.PageSize) {
                        $("#idPayment tr:last-child").remove();
                    }

                    // Show success message
                    showToast("New payment added");
                }

                // Refresh the page to update pagination info
                setTimeout(function() {
                    location.reload();
                }, 3000);
            });

            // Receive update notification from hub
            connection.on("Receive_UpdatePayment", function (payment) {
                console.log("🔄 Received updated payment data:", payment);

                // Find the payment row by ID
                var existingRow = $(`#${payment.paymentId}`);
                if (existingRow.length) {
                    // Replace the row contents with updated data
                    existingRow.html(`
                        <td>$${Math.floor(payment.amount)}</td>
                        <td>${payment.paymentStatus}</td>
                        <td>${payment.paymentMethod}</td>
                        <td>${payment.paymentDate ? payment.paymentDate.split('T')[0] : ""}</td>
                        <td>
                            <a href="./Details?id=${payment.paymentId}">Details</a> |
                            <a href="./Edit?id=${payment.paymentId}">Edit</a> |
                            <button class="btn btn-danger btn-sm delete-payment" data-id="${payment.paymentId}" data-bs-toggle="modal" data-bs-target="#deleteModal">Delete</button>
                        </td>
                    `);

                    // Show success message
                    showToast("Payment updated");
                }
            });

            // Receive delete notification from hub
            connection.on("Receive_DeletePayment", function (id) {
                console.log("🗑️ Received delete notification for payment ID:", id);

                // Only remove if we're not the ones who deleted it
                if (id !== deletePaymentId) {
                    $(`#${id}`).fadeOut(500, function() {
                        $(this).remove();

                        // Show notification
                        showToast("A payment was deleted by another user");

                        // Refresh the page to update pagination
                        setTimeout(function() {
                            location.reload();
                        }, 2000);
                    });
                }
            });

            // Start connection
            connection.start().then(function () {
                console.log("SignalR connected");
            }).catch(function (err) {
                console.error("SignalR connection error:", err.toString());
                showToast("Failed to connect to real-time updates", "error");
            });
        });
    </script>
}