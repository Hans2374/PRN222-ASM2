@page
@model PaymentCVSTS.RazorWebApp.Pages.Payments.CreateModel

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Payment</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form id="createForm" novalidate>
            <div class="form-group">
                <label for="Payment_Amount" class="control-label">Amount</label>
                <input id="Payment_Amount" name="Amount" class="form-control" type="number" step="0.01" />
                <span class="text-danger" id="amount-error"></span>
            </div>

            <div class="form-group">
                <label for="Payment_PaymentStatus" class="control-label">Payment Status</label>
                <select id="Payment_PaymentStatus" name="PaymentStatus" class="form-control">
                    <option value="">-- Select Status --</option>
                    <option value="Pending">Pending</option>
                    <option value="Completed">Completed</option>
                    <option value="Failed">Failed</option>
                </select>
                <span class="text-danger" id="status-error"></span>
            </div>

            <div class="form-group">
                <label for="Payment_PaymentMethod" class="control-label">Payment Method</label>
                <select id="Payment_PaymentMethod" name="PaymentMethod" class="form-control">
                    <option value="">-- Select Method --</option>
                    <option value="Credit Card">Credit Card</option>
                    <option value="Debit Card">Debit Card</option>
                    <option value="Bank Transfer">Bank Transfer</option>
                    <option value="Cash">Cash</option>
                    <option value="PayPal">PayPal</option>
                </select>
                <span class="text-danger" id="method-error"></span>
            </div>

            <div class="form-group">
                <label for="Payment_PaymentDate" class="control-label">Payment Date</label>
                <input id="Payment_PaymentDate" name="PaymentDate" class="form-control"
                       type="date" placeholder="dd/mm/yyyy" />
                <span class="text-danger" id="date-error"></span>
            </div>

            <div class="form-group">
                <label for="Payment_AppointmentId" class="control-label">Service Type</label>
                <select id="Payment_AppointmentId" name="AppointmentId" class="form-control"
                        asp-items="ViewBag.AppointmentId">
                    <option value="">-- Select Service Type --</option>
                </select>
                <span class="text-danger" id="appointment-error"></span>
            </div>

            <div class="form-group mt-3">
                <button type="submit" id="submitBtn" class="btn btn-primary">Create</button>
                <a asp-page="Index" class="btn btn-secondary">Cancel</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script src="~/js/signalr/dist/browser/signalr.min.js"></script>
    <script>
        // Connection variable
        let connection;

        // Initialize connection
        async function initConnection() {
            if (connection) return connection;

            connection = new signalR.HubConnectionBuilder()
                .withUrl("/paymentHub")
                .configureLogging(signalR.LogLevel.Information)
                .build();

            try {
                await connection.start();
                console.log("Connected to SignalR hub");
                return connection;
            } catch (err) {
                console.error("SignalR Connection failed: ", err);
                throw err;
            }
        }

        // Create payment function
        async function createPayment(payment) {
            const conn = await initConnection();
            console.log("Sending payment:", payment);
            await conn.invoke("SendPayment", JSON.stringify(payment));
        }

        // Validate form
        function validateForm() {
            let isValid = true;

            // Clear all previous error messages
            document.getElementById('amount-error').textContent = '';
            document.getElementById('status-error').textContent = '';
            document.getElementById('method-error').textContent = '';
            document.getElementById('date-error').textContent = '';
            document.getElementById('appointment-error').textContent = '';

            // Amount validation
            const amount = document.getElementById('Payment_Amount').value;
            if (!amount || parseFloat(amount) <= 0) {
                document.getElementById('amount-error').textContent = 'Amount is required and must be greater than 0';
                isValid = false;
            }

            // Status validation
            const status = document.getElementById('Payment_PaymentStatus').value;
            if (!status) {
                document.getElementById('status-error').textContent = 'Payment Status is required';
                isValid = false;
            }

            // Method validation
            const method = document.getElementById('Payment_PaymentMethod').value;
            if (!method) {
                document.getElementById('method-error').textContent = 'Payment Method is required';
                isValid = false;
            }

            // Date validation
            const date = document.getElementById('Payment_PaymentDate').value;
            if (!date) {
                document.getElementById('date-error').textContent = 'Payment Date is required';
                isValid = false;
            }

            // Appointment validation
            const appointmentId = document.getElementById('Payment_AppointmentId').value;
            if (!appointmentId) {
                document.getElementById('appointment-error').textContent = 'Service Type is required';
                isValid = false;
            }

            return isValid;
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            console.log("Page loaded, initializing...");
            initConnection();

            // Handle form submission
            document.getElementById('createForm').addEventListener('submit', async function(e) {
                e.preventDefault();

                if (!validateForm()) {
                    return false;
                }

                // Get form data
                const payment = {
                    amount: parseFloat(document.getElementById('Payment_Amount').value),
                    paymentStatus: document.getElementById('Payment_PaymentStatus').value,
                    paymentMethod: document.getElementById('Payment_PaymentMethod').value,
                    paymentDate: document.getElementById('Payment_PaymentDate').value,
                    appointmentId: parseInt(document.getElementById('Payment_AppointmentId').value)
                };

                try {
                    // Disable button and show loading
                    const submitBtn = document.getElementById('submitBtn');
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Creating...';

                    // Create payment
                    await createPayment(payment);

                    // Redirect to index
                    window.location.href = './Index';
                } catch (error) {
                    console.error("Error creating payment:", error);
                    alert("Error creating payment. Please try again.");

                    // Reset button
                    submitBtn.disabled = false;
                    submitBtn.textContent = 'Create';
                }
            });
        });
    </script>
}