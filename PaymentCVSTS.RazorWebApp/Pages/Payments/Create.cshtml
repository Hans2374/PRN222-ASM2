@page
@model PaymentCVSTS.RazorWebApp.Pages.Payments.CreateModel

@{
    ViewData["Title"] = "Create Payment";
}

<h1>Create Payment</h1>

<h4>Payment</h4>
<hr />
<div class="row">
    <div class="col-md-6">
        <form method="post" id="paymentForm" novalidate>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <!-- Add hidden fields to preserve filter state -->
            <input type="hidden" asp-for="PaymentDate" />
            <input type="hidden" asp-for="PaymentStatus" />
            <input type="hidden" asp-for="PaymentMethod" />

            <div class="form-group mb-3">
                <label asp-for="Payment.Amount" class="control-label">Amount</label>
                <input asp-for="Payment.Amount" class="form-control" type="number" step="0.01" />
                <span asp-validation-for="Payment.Amount" class="text-danger error-message"></span>
                <span id="amount-error" class="text-danger error-message"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Payment.PaymentStatus" class="control-label">Payment Status</label>
                <select asp-for="Payment.PaymentStatus" class="form-control" asp-items="@ViewData["PaymentStatus"] as SelectList">
                    <option value="">-- Select Status --</option>
                </select>
                <span asp-validation-for="Payment.PaymentStatus" class="text-danger error-message"></span>
                <span id="paymentStatus-error" class="text-danger error-message"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Payment.PaymentMethod" class="control-label">Payment Method</label>
                <select asp-for="Payment.PaymentMethod" class="form-control">
                    <option value="">-- Select Method --</option>
                    <option value="Credit Card">Credit Card</option>
                    <option value="Debit Card">Debit Card</option>
                    <option value="PayPal">PayPal</option>
                    <option value="Bank Transfer">Bank Transfer</option>
                    <option value="Cash">Cash</option>
                </select>
                <span asp-validation-for="Payment.PaymentMethod" class="text-danger error-message"></span>
                <span id="paymentMethod-error" class="text-danger error-message"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Payment.PaymentDate" class="control-label">Payment Date</label>
                <input name="Payment.PaymentDate" class="form-control" placeholder="dd/mm/yyyy" type="date"
                       value="@(Model.Payment.PaymentDate == default(DateOnly) ? "" : Model.Payment.PaymentDate.ToString("yyyy-MM-dd"))" />
                <span asp-validation-for="Payment.PaymentDate" class="text-danger error-message"></span>
                <span id="paymentDate-error" class="text-danger error-message"></span>
            </div>
            <div class="form-group mb-3">
                <label asp-for="Payment.AppointmentId" class="control-label">Service Type</label>
                <select asp-for="Payment.AppointmentId" class="form-control" asp-items="ViewBag.AppointmentId">
                    <option value="">-- Select Service Type --</option>
                </select>
                <span asp-validation-for="Payment.AppointmentId" class="text-danger error-message"></span>
                <span id="appointmentId-error" class="text-danger error-message"></span>
            </div>
            <div class="form-group mt-3">
                <input type="submit" value="Create" class="btn btn-primary" />
                <a asp-page="Index"
                   asp-route-PaymentDate="@Model.PaymentDate"
                   asp-route-PaymentStatus="@Model.PaymentStatus"
                   asp-route-PaymentMethod="@Model.PaymentMethod"
                   class="btn btn-secondary">Cancel</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="~/js/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/js/signalrPayments.js"></script>
    <script>
        $(document).ready(function() {
            // Clear all error messages
            function clearErrorMessages() {
                $('.error-message').text('');
            }

            // Client-side validation
            $('#paymentForm').on('submit', function(e) {
                // Prevent the default form submission to handle validation
                e.preventDefault();

                // Clear previous error messages
                clearErrorMessages();

                let isValid = true;

                // Validate Amount
                const amount = $('#Payment_Amount').val();
                if (!amount) {
                    $('#amount-error').text('Amount is required');
                    isValid = false;
                } else if (parseFloat(amount) <= 0) {
                    $('#amount-error').text('Amount must be greater than zero');
                    isValid = false;
                }

                // Validate Payment Status
                const paymentStatus = $('#Payment_PaymentStatus').val();
                if (!paymentStatus) {
                    $('#paymentStatus-error').text('Payment Status is required');
                    isValid = false;
                }

                // Validate Payment Method
                const paymentMethod = $('#Payment_PaymentMethod').val();
                if (!paymentMethod) {
                    $('#paymentMethod-error').text('Payment Method is required');
                    isValid = false;
                }

                // Validate Payment Date
                const paymentDate = $('#Payment_PaymentDate').val();
                if (!paymentDate) {
                    $('#paymentDate-error').text('Payment Date is required');
                    isValid = false;
                }

                // Validate Appointment ID
                const appointmentId = $('#Payment_AppointmentId').val();
                if (!appointmentId) {
                    $('#appointmentId-error').text('Service Type is required');
                    isValid = false;
                }

                // If using SignalR for form submission
                if (isValid) {
                    // Initialize SignalR
                    initializeSignalR().then(() => {
                        console.log("SignalR ready in Create page");

                        // Collect form data
                        var payment = {
                            amount: parseFloat($("#Payment_Amount").val()),
                            paymentStatus: $("#Payment_PaymentStatus").val(),
                            paymentMethod: $("#Payment_PaymentMethod").val(),
                            paymentDate: $("#Payment_PaymentDate").val(),
                            appointmentId: parseInt($("#Payment_AppointmentId").val())
                        };

                        console.log("Form data collected:", payment);

                        // Send via SignalR
                        createPaymentViaSignalR(payment)
                            .then(() => {
                                // Redirect back to list with filters
                                var url = "./Index";
                                var params = [];

                                if ("@Model.PaymentDate" !== "") {
                                    params.push("PaymentDate=@Model.PaymentDate");
                                }

                                if ("@Model.PaymentStatus" !== "") {
                                    params.push("PaymentStatus=@Model.PaymentStatus");
                                }

                                if ("@Model.PaymentMethod" !== "") {
                                    params.push("PaymentMethod=@Model.PaymentMethod");
                                }

                                if (params.length > 0) {
                                    url += "?" + params.join("&");
                                }

                                window.location.href = url;
                            })
                            .catch(err => {
                                console.error("Error creating payment:", err);
                                alert("Error creating payment. Please try again.");
                            });
                    });
                }

                return false; // Prevent form from submitting normally
            });

            // Clear error message when the field value changes
            $('.form-control').on('input change', function() {
                const fieldId = $(this).attr('id');

                switch(fieldId) {
                    case 'Payment_Amount':
                        $('#amount-error').text('');
                        break;
                    case 'Payment_PaymentStatus':
                        $('#paymentStatus-error').text('');
                        break;
                    case 'Payment_PaymentMethod':
                        $('#paymentMethod-error').text('');
                        break;
                    case 'Payment_PaymentDate':
                        $('#paymentDate-error').text('');
                        break;
                    case 'Payment_AppointmentId':
                        $('#appointmentId-error').text('');
                        break;
                }
            });
        });
    </script>
}